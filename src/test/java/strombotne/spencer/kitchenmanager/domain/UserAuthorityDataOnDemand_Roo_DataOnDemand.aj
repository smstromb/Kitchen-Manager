// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package strombotne.spencer.kitchenmanager.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import strombotne.spencer.kitchenmanager.domain.UserAuthority;

privileged aspect UserAuthorityDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserAuthorityDataOnDemand: @Component;
    
    private Random UserAuthorityDataOnDemand.rnd = new SecureRandom();
    
    private List<UserAuthority> UserAuthorityDataOnDemand.data;
    
    public UserAuthority UserAuthorityDataOnDemand.getNewTransientUserAuthority(int index) {
        UserAuthority obj = new UserAuthority();
        setAuthorityName(obj, index);
        return obj;
    }
    
    public void UserAuthorityDataOnDemand.setAuthorityName(UserAuthority obj, int index) {
        String authorityName = "authorityName_" + index;
        if (authorityName.length() > 50) {
            authorityName = authorityName.substring(0, 50);
        }
        obj.setAuthorityName(authorityName);
    }
    
    public UserAuthority UserAuthorityDataOnDemand.getSpecificUserAuthority(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        UserAuthority obj = data.get(index);
        return UserAuthority.findUserAuthority(obj.getId());
    }
    
    public UserAuthority UserAuthorityDataOnDemand.getRandomUserAuthority() {
        init();
        UserAuthority obj = data.get(rnd.nextInt(data.size()));
        return UserAuthority.findUserAuthority(obj.getId());
    }
    
    public boolean UserAuthorityDataOnDemand.modifyUserAuthority(UserAuthority obj) {
        return false;
    }
    
    public void UserAuthorityDataOnDemand.init() {
        data = UserAuthority.findUserAuthorityEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'UserAuthority' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<strombotne.spencer.kitchenmanager.domain.UserAuthority>();
        for (int i = 0; i < 10; i++) {
            UserAuthority obj = getNewTransientUserAuthority(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
