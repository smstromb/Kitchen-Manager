// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package strombotne.spencer.kitchenmanager.domain;

import java.lang.String;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import strombotne.spencer.kitchenmanager.domain.Recipe;

privileged aspect RecipeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RecipeDataOnDemand: @Component;
    
    private Random RecipeDataOnDemand.rnd = new SecureRandom();
    
    private List<Recipe> RecipeDataOnDemand.data;
    
    public Recipe RecipeDataOnDemand.getNewTransientRecipe(int index) {
        Recipe obj = new Recipe();
        setCreated(obj, index);
        setDescription(obj, index);
        setDisplayName(obj, index);
        return obj;
    }
    
    public void RecipeDataOnDemand.setCreated(Recipe obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void RecipeDataOnDemand.setDescription(Recipe obj, int index) {
        String description = "description_" + index;
        if (description.length() > 256) {
            description = description.substring(0, 256);
        }
        obj.setDescription(description);
    }
    
    public void RecipeDataOnDemand.setDisplayName(Recipe obj, int index) {
        String displayName = "displayName_" + index;
        if (displayName.length() > 50) {
            displayName = displayName.substring(0, 50);
        }
        obj.setDisplayName(displayName);
    }
    
    public Recipe RecipeDataOnDemand.getSpecificRecipe(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Recipe obj = data.get(index);
        return Recipe.findRecipe(obj.getId());
    }
    
    public Recipe RecipeDataOnDemand.getRandomRecipe() {
        init();
        Recipe obj = data.get(rnd.nextInt(data.size()));
        return Recipe.findRecipe(obj.getId());
    }
    
    public boolean RecipeDataOnDemand.modifyRecipe(Recipe obj) {
        return false;
    }
    
    public void RecipeDataOnDemand.init() {
        data = Recipe.findRecipeEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Recipe' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<strombotne.spencer.kitchenmanager.domain.Recipe>();
        for (int i = 0; i < 10; i++) {
            Recipe obj = getNewTransientRecipe(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> it = e.getConstraintViolations().iterator(); it.hasNext();) {
                    ConstraintViolation<?> cv = it.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
