// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package strombotne.spencer.kitchenmanager.domain;

import java.lang.String;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import strombotne.spencer.kitchenmanager.domain.Ingredient;
import strombotne.spencer.kitchenmanager.domain.Recipe;

privileged aspect Recipe_Roo_Finder {
    
    public static TypedQuery<Recipe> Recipe.findRecipesByDescriptionEquals(String description) {
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        EntityManager em = Recipe.entityManager();
        TypedQuery<Recipe> q = em.createQuery("SELECT o FROM Recipe AS o WHERE o.description = :description", Recipe.class);
        q.setParameter("description", description);
        return q;
    }
    
    public static TypedQuery<Recipe> Recipe.findRecipesByDescriptionLike(String description) {
        if (description == null || description.length() == 0) throw new IllegalArgumentException("The description argument is required");
        description = description.replace('*', '%');
        if (description.charAt(0) != '%') {
            description = "%" + description;
        }
        if (description.charAt(description.length() - 1) != '%') {
            description = description + "%";
        }
        EntityManager em = Recipe.entityManager();
        TypedQuery<Recipe> q = em.createQuery("SELECT o FROM Recipe AS o WHERE LOWER(o.description) LIKE LOWER(:description)", Recipe.class);
        q.setParameter("description", description);
        return q;
    }
    
    public static TypedQuery<Recipe> Recipe.findRecipesByDisplayNameEquals(String displayName) {
        if (displayName == null || displayName.length() == 0) throw new IllegalArgumentException("The displayName argument is required");
        EntityManager em = Recipe.entityManager();
        TypedQuery<Recipe> q = em.createQuery("SELECT o FROM Recipe AS o WHERE o.displayName = :displayName", Recipe.class);
        q.setParameter("displayName", displayName);
        return q;
    }
    
    public static TypedQuery<Recipe> Recipe.findRecipesByDisplayNameLike(String displayName) {
        if (displayName == null || displayName.length() == 0) throw new IllegalArgumentException("The displayName argument is required");
        displayName = displayName.replace('*', '%');
        if (displayName.charAt(0) != '%') {
            displayName = "%" + displayName;
        }
        if (displayName.charAt(displayName.length() - 1) != '%') {
            displayName = displayName + "%";
        }
        EntityManager em = Recipe.entityManager();
        TypedQuery<Recipe> q = em.createQuery("SELECT o FROM Recipe AS o WHERE LOWER(o.displayName) LIKE LOWER(:displayName)", Recipe.class);
        q.setParameter("displayName", displayName);
        return q;
    }
    
    public static TypedQuery<Recipe> Recipe.findRecipesByIngredients(Set<Ingredient> ingredients) {
        if (ingredients == null) throw new IllegalArgumentException("The ingredients argument is required");
        EntityManager em = Recipe.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Recipe AS o WHERE");
        for (int i = 0; i < ingredients.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :ingredients_item").append(i).append(" MEMBER OF o.ingredients");
        }
        TypedQuery<Recipe> q = em.createQuery(queryBuilder.toString(), Recipe.class);
        int ingredientsIndex = 0;
        for (Ingredient _ingredient: ingredients) {
            q.setParameter("ingredients_item" + ingredientsIndex++, _ingredient);
        }
        return q;
    }
    
}
