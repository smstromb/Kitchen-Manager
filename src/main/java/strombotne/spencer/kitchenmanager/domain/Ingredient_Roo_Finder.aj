// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package strombotne.spencer.kitchenmanager.domain;

import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import strombotne.spencer.kitchenmanager.domain.Ingredient;
import strombotne.spencer.kitchenmanager.domain.IngredientType;

privileged aspect Ingredient_Roo_Finder {
    
    public static TypedQuery<Ingredient> Ingredient.findIngredientsByDisplayNameEquals(String displayName) {
        if (displayName == null || displayName.length() == 0) throw new IllegalArgumentException("The displayName argument is required");
        EntityManager em = Ingredient.entityManager();
        TypedQuery<Ingredient> q = em.createQuery("SELECT o FROM Ingredient AS o WHERE o.displayName = :displayName", Ingredient.class);
        q.setParameter("displayName", displayName);
        return q;
    }
    
    public static TypedQuery<Ingredient> Ingredient.findIngredientsByDisplayNameLike(String displayName) {
        if (displayName == null || displayName.length() == 0) throw new IllegalArgumentException("The displayName argument is required");
        displayName = displayName.replace('*', '%');
        if (displayName.charAt(0) != '%') {
            displayName = "%" + displayName;
        }
        if (displayName.charAt(displayName.length() - 1) != '%') {
            displayName = displayName + "%";
        }
        EntityManager em = Ingredient.entityManager();
        TypedQuery<Ingredient> q = em.createQuery("SELECT o FROM Ingredient AS o WHERE LOWER(o.displayName) LIKE LOWER(:displayName)", Ingredient.class);
        q.setParameter("displayName", displayName);
        return q;
    }
    
    public static TypedQuery<Ingredient> Ingredient.findIngredientsByType(IngredientType type) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        EntityManager em = Ingredient.entityManager();
        TypedQuery<Ingredient> q = em.createQuery("SELECT o FROM Ingredient AS o WHERE o.type = :type", Ingredient.class);
        q.setParameter("type", type);
        return q;
    }
    
}
